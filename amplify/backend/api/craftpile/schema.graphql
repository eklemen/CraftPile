# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

input addChildInput {
  name: String!
  age: Int
  _id: ID
  accountId: String!
}

input deleteChildInput {
  _id: ID!
}

input photoIdsInput {
  ids: [ID!]!
}

input deletePhotosInAlbumInput {
  ids: [ID]!
  albumId: ID!
  childId: ID!
}

input assignPhotosToChildInput {
  ids: [ID!]!
  childId: String!
}

input reassignPhotosToChildInput {
  ids: [ID!]!
  childId: String!
  albumId: ID!
}

input addUnsortedPhotosToAlbumInput {
  ids: [ID!]!
  albumId: String!
}

input createAlbumInput {
  childId: String!
  name: String!
  accountId: String!
  description: String
}

input getPhotosForAlbumInput {
  albumId: ID!
  limit: Int
  nextToken: String
  childId: String
}

input getAlbumsForChildInput {
  childId: ID!
  limit: Int
  nextToken: String
}

input updatePhotoPropertiesInput {
  id: ID!
  dateOfPhoto: String
  title: String
  description: String
  childId: String
  albums: [String]
  tags: [String]
}

type Photo {
  _id: ID!
  bucketName: String!
  objectKey: String!
  thumbnailKey: String!
  localPath: String
  dateOfPhoto: String!
  title: String
  description: String
  childId: String!
  accountId: String!
  albums: [String!]
}

type Child {
  _id: ID!
  name: String!
  accountId: String!
}

type Album {
  _id: ID!
  name: String!
  description: String
  childId: String!
  posterImage: String
}

type User {
  _id: ID!
  userId: String!
  email: String!
  accountId: String!
  children: [Child]!
}

type ChildAlbums {
  _id: ID!
  name: String!
  albums: [Album!]!
}

type UnsortedPhoto {
  _id: ID!
  bucketName: String!
  objectKey: String!
  dateOfPhoto: String!
  childId: String!
  thumbnailKey: String!
  localPath: String
}
#type UnsortedId {
#  childId: ID!
#  name: String!
#}
type ChildUnsortedPhotos {
  _id: ID!
  childName: String
  photos: [UnsortedPhoto!]!
}

type PhotosForAlbum {
  _id: ID!
  name: String!
  description: String
  childId: String!
  accountId: String!
  posterImage: String
  photos: [Photo!]!
}

type DeleteCount {
  deletedCount: Int!
}

type Query {
  getPhotosForAlbum(input: getPhotosForAlbumInput): PhotosForAlbum
  @function(name: "craftpilePhotos-${env}")

  getUser: User!
  @function(name: "craftpilePhotos-${env}")

  getChildrenAlbums: [ChildAlbums!]!
  @function(name: "craftpilePhotos-${env}")

  getChildrenUnsortedPhotos: [ChildUnsortedPhotos!]!
  @function(name: "craftpilePhotos-${env}")

#  TODO: make ChildAlbum get last inserted photo for the cover
  getAlbumsForChild(input: getAlbumsForChildInput!): ChildAlbums!
  @function(name: "craftpilePhotos-${env}")
}

type Mutation {
  updatePhotoProps(input: updatePhotoPropertiesInput): Photo
  @function(name: "craftpilePhotos-${env}")

  addChild(input: addChildInput): [Child]!
  @function(name: "craftpilePhotos-${env}")

  deleteChild(input: deleteChildInput): [Child]!
  @function(name: "craftpilePhotos-${env}")

################
#  album view
  #  delete photos (for album view)
  deletePhotosInAlbum(input: deletePhotosInAlbumInput!): PhotosForAlbum!
  @function(name: "craftpilePhotos-${env}")

  assignPhotosToChildInAlbums(input: reassignPhotosToChildInput!): [Photo!]!
  @function(name: "craftpilePhotos-${env}")
#  end album view

#################
#  Pile / unsorted photos
  deleteUnsortedPhotos(input: photoIdsInput!): [ChildUnsortedPhotos!]
  @function(name: "craftpilePhotos-${env}")

  assignPhotosToChild(input: assignPhotosToChildInput!): [ChildUnsortedPhotos!]
  @function(name: "craftpilePhotos-${env}")

  addUnsortedPhotosToAlbum(input: addUnsortedPhotosToAlbumInput!): [ChildUnsortedPhotos!]!
  @function(name: "craftpilePhotos-${env}")
# end pile / unsorted photos


  createAlbum(input: createAlbumInput!): ChildAlbums!
  @function(name: "craftpilePhotos-${env}")
}

